name: "Test and coverage check"
description: "Test and coverage check with gcovr, pass if coverage is greater than 20%"

inputs:
  path:
    required: true
    description: "Path to run tests and coverage"
    default: .

runs:
  using: "composite"
  steps:
    - name: Run tests
      shell: bash
      run: |
        # Run tests
        cd ${{ inputs.path }}/build

        ctest --output-on-failure

    - name: Run valgrind
      shell: bash
      run: |
        # Run tests and check for memory leaks
        cd ${{ inputs.path }}/build

        valgrind --leak-check=full ctest --output-on-failure

    - name: Generate coverage files
      shell: bash
      run: |
        # Generate coverage files
        cd ${{ inputs.path }}

        # Set arguments
        arguments="--capture "

        # Set working directory
        if [[ -d "build/tests/unit" ]]; then
          arguments+="--directory build/tests/unit "
        fi

        if [[ -d "build/tests/component" ]]; then
          arguments+="--directory build/tests/component "
        fi

        # Set output file
        arguments+="--output-file build/coverage.info "

        # # Disable branch coverage
        arguments+="--no-branch-coverage "

        # Include test files
        include_files=""
        for file in $(find src/ include/ -type f -regextype posix-extended -regex ".*/*\.(cpp|h|c)" ! -name "main.cpp")
        do
          include_files+="--include=$(pwd)$dir/$file "
        done
        arguments+="$include_files"

        echo "Executing: lcov $arguments"
        lcov $arguments

    - name: Generate coverage report
      shell: bash
      run: |

        cd ${{ inputs.path }}/build

        # Generate HTML report
        genhtml coverage.info --output-directory coverageReport

    # Upload the coverage report as an artifact
    - name: Uploading coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report
        path: ${{ inputs.path }}/build/coverageReport
        retention-days: 1

    # Check whether the coverage is greater than 20% both for lines and functions
    - name: Validate coverage
      shell: bash
      run: |
        cd "${{ inputs.path }}"

        # Obtain the coverage summary data
        # This should produce output like:
        #   lines......: 94.6% (533 of 562 lines)
        #   functions..: 96.8% (126 of 130 functions)
        #   branches...: 88.0% (110 of 125 branches)
        coverageData=($(lcov --summary build/coverage.info | grep -oE '[0-9.]+%'))

        echo "Coverage summary data: ${coverageData[@]}"

        # Extract and clean up the percentages:
        # We expect coverageData[0] to be lines coverage and coverageData[1] to be functions coverage.
        linesCoverage=$(echo "${coverageData[0]}" | sed 's/%//')
        functionsCoverage=$(echo "${coverageData[1]}" | sed 's/%//')
        echo "Lines coverage is: $linesCoverage %"

        if ! (( $(echo "$linesCoverage > 90" | bc -l) )); then
          echo "----------------------------------------"
          echo "FAILED: Lines coverage is lower than 90%"
          echo "----------------------------------------"
          exit 1
        else
          echo "------------------------------------------"
          echo "PASSED: Lines coverage is greater than 90%"
          echo "------------------------------------------"
        fi

        echo "Functions coverage is: $functionsCoverage %"
        if ! (( $(echo "$functionsCoverage > 90" | bc -l) )); then
          echo "---------------------------------------------"
          echo "FAILED: Functions coverage is lower than 90%"
          echo "---------------------------------------------"
          exit 1
        else
          echo "----------------------------------------------"
          echo "PASSED: Functions coverage is greater than 90%"
          echo "----------------------------------------------"
        fi
